// <auto-generated />
using System;
using MedicalClinics.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedicalClinics.Infrastructure.Migrations
{
    [DbContext(typeof(MedicalClinicsDBContext))]
    [Migration("20250619085152_AddConactFieldInRecord")]
    partial class AddConactFieldInRecord
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedicalClinics.Core.Database.Entities.CabinetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClinicId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Cabinets");
                });

            modelBuilder.Entity("MedicalClinics.Core.Database.Entities.FreeRecordEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CabinetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CabinetId");

                    b.ToTable("FreeRecordEntity");
                });

            modelBuilder.Entity("MedicalClinics.Core.Database.Entities.RecordOnClinicEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CabinetId")
                        .HasColumnType("uuid");

                    b.Property<string>("CabinetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClinicId")
                        .HasColumnType("integer");

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RecordDateOnUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CabinetId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("RecordOnClinics");
                });

            modelBuilder.Entity("MedicalClinics.Core.Entities.ClinicEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("MedicalClinics.Core.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MedicalClinics.Core.Database.Entities.CabinetEntity", b =>
                {
                    b.HasOne("MedicalClinics.Core.Entities.ClinicEntity", "Clinic")
                        .WithMany("Cabinets")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("MedicalClinics.Core.Database.Entities.FreeRecordEntity", b =>
                {
                    b.HasOne("MedicalClinics.Core.Database.Entities.CabinetEntity", "Cabinet")
                        .WithMany("FreeRecords")
                        .HasForeignKey("CabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabinet");
                });

            modelBuilder.Entity("MedicalClinics.Core.Database.Entities.RecordOnClinicEntity", b =>
                {
                    b.HasOne("MedicalClinics.Core.Database.Entities.CabinetEntity", "Cabinet")
                        .WithMany()
                        .HasForeignKey("CabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalClinics.Core.Entities.ClinicEntity", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalClinics.Core.Entities.UserEntity", null)
                        .WithMany("RecordsOnClinic")
                        .HasForeignKey("UserEntityId");

                    b.Navigation("Cabinet");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("MedicalClinics.Core.Database.Entities.CabinetEntity", b =>
                {
                    b.Navigation("FreeRecords");
                });

            modelBuilder.Entity("MedicalClinics.Core.Entities.ClinicEntity", b =>
                {
                    b.Navigation("Cabinets");
                });

            modelBuilder.Entity("MedicalClinics.Core.Entities.UserEntity", b =>
                {
                    b.Navigation("RecordsOnClinic");
                });
#pragma warning restore 612, 618
        }
    }
}
